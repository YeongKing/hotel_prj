name: 도커 이미지 생성 및 배포

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  build_and_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 코드 저장소
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Node.js 버전을 적절히 조정

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.8.2'

      - name: Verify Maven installation
        run: mvn -version

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # 사용할 JDK 버전을 선택
          distribution: 'adopt'  # Example distribution, adjust as needed

      - name: Build Docker image
        run: docker build -t elysian .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker tag elysian ${{ secrets.DOCKER_USERNAME }}/elysian:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/elysian:latest
  run_docker_container:
    needs: build_and_deploy
    runs-on: self-hosted  # self-hosted 러너에서 실행

    steps:
      - name: Pull Docker image from Docker Hub
        run: |
          $IMAGE_NAME = "${{ secrets.DOCKER_USERNAME }}/elysian:latest"
          if (docker inspect $IMAGE_NAME -ErrorAction SilentlyContinue) {
            Write-Output "Image exists. Removing..."
            docker rmi -f $IMAGE_NAME
            Write-Output "Downloading image..."
            docker pull $IMAGE_NAME
      - name: Check if Docker container exists and is running
        id: check_docker_container
        run: |
          $container_id = docker ps -aqf "name=elysian-container"
          if (-not $container_id) {
            Write-Output "container_exists=false" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            Write-Output "container_exists=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            $container_running = docker inspect -f '{{.State.Running}}' $container_id
            if ($container_running -eq "true") {
              Write-Output "container_running=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Output "container_running=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
          }
      - name: Stop and remove Docker container if running
        if: env.container_running == 'true'
        run: |
          docker stop elysian-container
          docker rm elysian-container
      - name: Remove Docker container if exists (not running)
        if: env.container_exists == 'true' && env.container_running == 'false'
        run: docker rm elysian-container

      - name: Check and remove containers using port 80
        run: |
          $containersUsingPort = docker ps -aq --filter "publish=80"
          if ($containersUsingPort) {
            docker stop $containersUsingPort
            docker rm $containersUsingPort
          }
      - name: Run Docker container
        run: docker run -d -p 80:8080 --name elysian-container ${{ secrets.DOCKER_USERNAME }}/elysian:latest